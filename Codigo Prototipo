#include <SoftwareSerial.h>
#include <OneWire.h>
#include <DallasTemperature.h>

SoftwareSerial GSM(11, 10); // Pinos RX e TX conectados ao módulo SIM900

// Defina os pinos aos quais os sensores estão conectados
#define FLOW_SENSOR_PIN 2
#define ONE_WIRE_BUS 3         // sinal do sensor DS18B20
#define TURBIDITY_SENSOR_PIN A0 // pino do sensor de turbidez

// Variáveis para armazenar os dados do sensor de fluxo de água
volatile int pulseCount;
float flowRate;
const float calibrationFactor = 7.5; // Fator de calibração específico do sensor

// Variáveis para armazenar os dados do sensor de temperatura
OneWire oneWire(ONE_WIRE_BUS);
DallasTemperature sensors(&oneWire);
DeviceAddress sensor1;

// Variáveis para armazenar os dados do sensor de turbidez
double NTU = 0.0;

// Variáveis para cálculos
unsigned long startTime;
unsigned long lastTime;
unsigned long currentTime;
unsigned long lastSMSTime = 0; // Para rastrear o tempo da última mensagem de texto
const unsigned long interval = 30000; // Intervalo de 30 segundos para testes

void setup() {
  Serial.begin(9600);
  GSM.begin(9600);

  GSM.println("AT");
  delay(1000);
  while (GSM.available()) {
    Serial.write(GSM.read()); // Mostra a resposta no Monitor Serial
  }

  GSM.println("AT+CMGF=1"); // Configura o módulo para o modo texto
  delay(1000);

  Serial.println("Initializing...");

  // Inicialize as variáveis do sensor de fluxo de água
  pulseCount = 0;
  flowRate = 0;
  startTime = millis();

  // Configure o pino do sensor de fluxo como entrada
  pinMode(FLOW_SENSOR_PIN, INPUT);

  // Attach uma interrupção ao pino do sensor para contar os pulsos
  attachInterrupt(digitalPinToInterrupt(FLOW_SENSOR_PIN), pulseCounter, FALLING);

  // Inicie o sensor de temperatura
  sensors.begin();

  Serial.println("Localizando sensores DS18B20...");
  if (!sensors.getAddress(sensor1, 0))
    Serial.println("Sensores nao encontrados !");
}

void loop() {
  currentTime = millis();
  if (currentTime - lastSMSTime >= interval) {
    sendSMS("+5575981342134", getSensorData());
    lastSMSTime = currentTime;
  }

  Serial.println(getSensorData());
  delay(10000); // Aguarde 10 segundos
}

// Função para obter dados dos sensores
String getSensorData() {
  // Calcule o tempo decorrido em segundos
  float elapsedTime = (millis() - startTime) / 1000.0;

  // Calcule a taxa de fluxo em litros por minuto
  flowRate = (pulseCount / (calibrationFactor * elapsedTime)) * 60;

  // Le a informacao do sensor de temperatura
  sensors.requestTemperatures();
  float tempC = sensors.getTempC(sensor1);

  // Leitura e cálculo da turbidez
  int sensorValue = analogRead(TURBIDITY_SENSOR_PIN);
  float voltage = sensorValue * (5.0 / 1024.0);
  NTU = calc_NTU(voltage);

  // Formate os dados em uma string
  String data = "Fluxo de agua (L/min): " + String(flowRate, 2) + "\n";
  data += "Temperatura (C): " + String(tempC, 2) + "\n";
  data += "Turbidez (NTU): " + String(NTU, 2);

  // Reinicie as variáveis do sensor de fluxo para a próxima leitura
  pulseCount = 0;
  startTime = millis();

  return data;
}

// Função para enviar mensagem de texto
void sendSMS(const char* number, String message) {
  GSM.print("AT+CMGS=\"");
  GSM.print(number);
  GSM.println("\"");
  delay(500);
  GSM.print(message);
  delay(500);
  GSM.println((char)26); // Ctrl+Z
  delay(5000);

  while (GSM.available()) {
    Serial.write(GSM.read());
  }
}

// Função de interrupção para contar os pulsos do sensor de fluxo de água
void pulseCounter() {
  pulseCount++;
}

// Função para conversão de tensão para Turbidez em NTU
double calc_NTU(double volt) {
  if (volt < 0 || volt > 5) {
    return -1;
  }

  double NTU_val = -(1120.4 * volt * volt) + (5742.3 * volt) - 4352.9;
  return NTU_val;
}
